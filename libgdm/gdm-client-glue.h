/*
 * Generated by gdbus-codegen 2.56.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GDM_CLIENT_GLUE_H__
#define __GDM_CLIENT_GLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DisplayManager.WorkerManager */

#define GDM_TYPE_WORKER_MANAGER (gdm_worker_manager_get_type ())
#define GDM_WORKER_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_WORKER_MANAGER, GdmWorkerManager))
#define GDM_IS_WORKER_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_WORKER_MANAGER))
#define GDM_WORKER_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDM_TYPE_WORKER_MANAGER, GdmWorkerManagerIface))

struct _GdmWorkerManager;
typedef struct _GdmWorkerManager GdmWorkerManager;
typedef struct _GdmWorkerManagerIface GdmWorkerManagerIface;

struct _GdmWorkerManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_choice_list_query) (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    const gchar *arg_prompt_message,
    GVariant *arg_query);

  gboolean (*handle_hello) (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_info) (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    const gchar *arg_info);

  gboolean (*handle_info_query) (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    const gchar *arg_query);

  gboolean (*handle_problem) (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    const gchar *arg_problem);

  gboolean (*handle_secret_info_query) (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    const gchar *arg_query);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmWorkerManager, g_object_unref)
#endif

GType gdm_worker_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdm_worker_manager_interface_info (void);
guint gdm_worker_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdm_worker_manager_complete_hello (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation);

void gdm_worker_manager_complete_info_query (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *answer);

void gdm_worker_manager_complete_secret_info_query (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *answer);

void gdm_worker_manager_complete_info (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation);

void gdm_worker_manager_complete_problem (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation);

void gdm_worker_manager_complete_choice_list_query (
    GdmWorkerManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *answer);



/* D-Bus method calls: */
void gdm_worker_manager_call_hello (
    GdmWorkerManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_worker_manager_call_hello_finish (
    GdmWorkerManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_worker_manager_call_hello_sync (
    GdmWorkerManager *proxy,
    GCancellable *cancellable,
    GError **error);

void gdm_worker_manager_call_info_query (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_worker_manager_call_info_query_finish (
    GdmWorkerManager *proxy,
    gchar **out_answer,
    GAsyncResult *res,
    GError **error);

gboolean gdm_worker_manager_call_info_query_sync (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_query,
    gchar **out_answer,
    GCancellable *cancellable,
    GError **error);

void gdm_worker_manager_call_secret_info_query (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_worker_manager_call_secret_info_query_finish (
    GdmWorkerManager *proxy,
    gchar **out_answer,
    GAsyncResult *res,
    GError **error);

gboolean gdm_worker_manager_call_secret_info_query_sync (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_query,
    gchar **out_answer,
    GCancellable *cancellable,
    GError **error);

void gdm_worker_manager_call_info (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_info,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_worker_manager_call_info_finish (
    GdmWorkerManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_worker_manager_call_info_sync (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_info,
    GCancellable *cancellable,
    GError **error);

void gdm_worker_manager_call_problem (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_problem,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_worker_manager_call_problem_finish (
    GdmWorkerManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_worker_manager_call_problem_sync (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_problem,
    GCancellable *cancellable,
    GError **error);

void gdm_worker_manager_call_choice_list_query (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_prompt_message,
    GVariant *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_worker_manager_call_choice_list_query_finish (
    GdmWorkerManager *proxy,
    gchar **out_answer,
    GAsyncResult *res,
    GError **error);

gboolean gdm_worker_manager_call_choice_list_query_sync (
    GdmWorkerManager *proxy,
    const gchar *arg_service_name,
    const gchar *arg_prompt_message,
    GVariant *arg_query,
    gchar **out_answer,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDM_TYPE_WORKER_MANAGER_PROXY (gdm_worker_manager_proxy_get_type ())
#define GDM_WORKER_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_WORKER_MANAGER_PROXY, GdmWorkerManagerProxy))
#define GDM_WORKER_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_WORKER_MANAGER_PROXY, GdmWorkerManagerProxyClass))
#define GDM_WORKER_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_WORKER_MANAGER_PROXY, GdmWorkerManagerProxyClass))
#define GDM_IS_WORKER_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_WORKER_MANAGER_PROXY))
#define GDM_IS_WORKER_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_WORKER_MANAGER_PROXY))

typedef struct _GdmWorkerManagerProxy GdmWorkerManagerProxy;
typedef struct _GdmWorkerManagerProxyClass GdmWorkerManagerProxyClass;
typedef struct _GdmWorkerManagerProxyPrivate GdmWorkerManagerProxyPrivate;

struct _GdmWorkerManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdmWorkerManagerProxyPrivate *priv;
};

struct _GdmWorkerManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdm_worker_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmWorkerManagerProxy, g_object_unref)
#endif

void gdm_worker_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmWorkerManager *gdm_worker_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdmWorkerManager *gdm_worker_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdm_worker_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmWorkerManager *gdm_worker_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdmWorkerManager *gdm_worker_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDM_TYPE_WORKER_MANAGER_SKELETON (gdm_worker_manager_skeleton_get_type ())
#define GDM_WORKER_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_WORKER_MANAGER_SKELETON, GdmWorkerManagerSkeleton))
#define GDM_WORKER_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_WORKER_MANAGER_SKELETON, GdmWorkerManagerSkeletonClass))
#define GDM_WORKER_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_WORKER_MANAGER_SKELETON, GdmWorkerManagerSkeletonClass))
#define GDM_IS_WORKER_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_WORKER_MANAGER_SKELETON))
#define GDM_IS_WORKER_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_WORKER_MANAGER_SKELETON))

typedef struct _GdmWorkerManagerSkeleton GdmWorkerManagerSkeleton;
typedef struct _GdmWorkerManagerSkeletonClass GdmWorkerManagerSkeletonClass;
typedef struct _GdmWorkerManagerSkeletonPrivate GdmWorkerManagerSkeletonPrivate;

struct _GdmWorkerManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdmWorkerManagerSkeletonPrivate *priv;
};

struct _GdmWorkerManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdm_worker_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmWorkerManagerSkeleton, g_object_unref)
#endif

GdmWorkerManager *gdm_worker_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DisplayManager.UserVerifier */

#define GDM_TYPE_USER_VERIFIER (gdm_user_verifier_get_type ())
#define GDM_USER_VERIFIER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_USER_VERIFIER, GdmUserVerifier))
#define GDM_IS_USER_VERIFIER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_USER_VERIFIER))
#define GDM_USER_VERIFIER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDM_TYPE_USER_VERIFIER, GdmUserVerifierIface))

struct _GdmUserVerifier;
typedef struct _GdmUserVerifier GdmUserVerifier;
typedef struct _GdmUserVerifierIface GdmUserVerifierIface;

struct _GdmUserVerifierIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_answer_query) (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    const gchar *arg_answer);

  gboolean (*handle_begin_verification) (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name);

  gboolean (*handle_begin_verification_for_user) (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    const gchar *arg_username);

  gboolean (*handle_cancel) (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enable_extensions) (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_extensions);

  void (*conversation_started) (
    GdmUserVerifier *object,
    const gchar *arg_service_name);

  void (*conversation_stopped) (
    GdmUserVerifier *object,
    const gchar *arg_service_name);

  void (*info) (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_info);

  void (*info_query) (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_query);

  void (*problem) (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_problem);

  void (*reauthentication_started) (
    GdmUserVerifier *object,
    gint arg_pid_of_caller);

  void (*reset) (
    GdmUserVerifier *object);

  void (*secret_info_query) (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_query);

  void (*service_unavailable) (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_message);

  void (*verification_complete) (
    GdmUserVerifier *object,
    const gchar *arg_service_name);

  void (*verification_failed) (
    GdmUserVerifier *object,
    const gchar *arg_service_name);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmUserVerifier, g_object_unref)
#endif

GType gdm_user_verifier_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdm_user_verifier_interface_info (void);
guint gdm_user_verifier_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdm_user_verifier_complete_enable_extensions (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation);

void gdm_user_verifier_complete_begin_verification (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation);

void gdm_user_verifier_complete_begin_verification_for_user (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation);

void gdm_user_verifier_complete_answer_query (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation);

void gdm_user_verifier_complete_cancel (
    GdmUserVerifier *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gdm_user_verifier_emit_conversation_started (
    GdmUserVerifier *object,
    const gchar *arg_service_name);

void gdm_user_verifier_emit_conversation_stopped (
    GdmUserVerifier *object,
    const gchar *arg_service_name);

void gdm_user_verifier_emit_reauthentication_started (
    GdmUserVerifier *object,
    gint arg_pid_of_caller);

void gdm_user_verifier_emit_info (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_info);

void gdm_user_verifier_emit_problem (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_problem);

void gdm_user_verifier_emit_info_query (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_query);

void gdm_user_verifier_emit_secret_info_query (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_query);

void gdm_user_verifier_emit_reset (
    GdmUserVerifier *object);

void gdm_user_verifier_emit_service_unavailable (
    GdmUserVerifier *object,
    const gchar *arg_service_name,
    const gchar *arg_message);

void gdm_user_verifier_emit_verification_failed (
    GdmUserVerifier *object,
    const gchar *arg_service_name);

void gdm_user_verifier_emit_verification_complete (
    GdmUserVerifier *object,
    const gchar *arg_service_name);



/* D-Bus method calls: */
void gdm_user_verifier_call_enable_extensions (
    GdmUserVerifier *proxy,
    const gchar *const *arg_extensions,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_user_verifier_call_enable_extensions_finish (
    GdmUserVerifier *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_user_verifier_call_enable_extensions_sync (
    GdmUserVerifier *proxy,
    const gchar *const *arg_extensions,
    GCancellable *cancellable,
    GError **error);

void gdm_user_verifier_call_begin_verification (
    GdmUserVerifier *proxy,
    const gchar *arg_service_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_user_verifier_call_begin_verification_finish (
    GdmUserVerifier *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_user_verifier_call_begin_verification_sync (
    GdmUserVerifier *proxy,
    const gchar *arg_service_name,
    GCancellable *cancellable,
    GError **error);

void gdm_user_verifier_call_begin_verification_for_user (
    GdmUserVerifier *proxy,
    const gchar *arg_service_name,
    const gchar *arg_username,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_user_verifier_call_begin_verification_for_user_finish (
    GdmUserVerifier *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_user_verifier_call_begin_verification_for_user_sync (
    GdmUserVerifier *proxy,
    const gchar *arg_service_name,
    const gchar *arg_username,
    GCancellable *cancellable,
    GError **error);

void gdm_user_verifier_call_answer_query (
    GdmUserVerifier *proxy,
    const gchar *arg_service_name,
    const gchar *arg_answer,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_user_verifier_call_answer_query_finish (
    GdmUserVerifier *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_user_verifier_call_answer_query_sync (
    GdmUserVerifier *proxy,
    const gchar *arg_service_name,
    const gchar *arg_answer,
    GCancellable *cancellable,
    GError **error);

void gdm_user_verifier_call_cancel (
    GdmUserVerifier *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_user_verifier_call_cancel_finish (
    GdmUserVerifier *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_user_verifier_call_cancel_sync (
    GdmUserVerifier *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDM_TYPE_USER_VERIFIER_PROXY (gdm_user_verifier_proxy_get_type ())
#define GDM_USER_VERIFIER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_USER_VERIFIER_PROXY, GdmUserVerifierProxy))
#define GDM_USER_VERIFIER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_USER_VERIFIER_PROXY, GdmUserVerifierProxyClass))
#define GDM_USER_VERIFIER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_USER_VERIFIER_PROXY, GdmUserVerifierProxyClass))
#define GDM_IS_USER_VERIFIER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_USER_VERIFIER_PROXY))
#define GDM_IS_USER_VERIFIER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_USER_VERIFIER_PROXY))

typedef struct _GdmUserVerifierProxy GdmUserVerifierProxy;
typedef struct _GdmUserVerifierProxyClass GdmUserVerifierProxyClass;
typedef struct _GdmUserVerifierProxyPrivate GdmUserVerifierProxyPrivate;

struct _GdmUserVerifierProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdmUserVerifierProxyPrivate *priv;
};

struct _GdmUserVerifierProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdm_user_verifier_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmUserVerifierProxy, g_object_unref)
#endif

void gdm_user_verifier_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmUserVerifier *gdm_user_verifier_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdmUserVerifier *gdm_user_verifier_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdm_user_verifier_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmUserVerifier *gdm_user_verifier_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdmUserVerifier *gdm_user_verifier_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDM_TYPE_USER_VERIFIER_SKELETON (gdm_user_verifier_skeleton_get_type ())
#define GDM_USER_VERIFIER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_USER_VERIFIER_SKELETON, GdmUserVerifierSkeleton))
#define GDM_USER_VERIFIER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_USER_VERIFIER_SKELETON, GdmUserVerifierSkeletonClass))
#define GDM_USER_VERIFIER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_USER_VERIFIER_SKELETON, GdmUserVerifierSkeletonClass))
#define GDM_IS_USER_VERIFIER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_USER_VERIFIER_SKELETON))
#define GDM_IS_USER_VERIFIER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_USER_VERIFIER_SKELETON))

typedef struct _GdmUserVerifierSkeleton GdmUserVerifierSkeleton;
typedef struct _GdmUserVerifierSkeletonClass GdmUserVerifierSkeletonClass;
typedef struct _GdmUserVerifierSkeletonPrivate GdmUserVerifierSkeletonPrivate;

struct _GdmUserVerifierSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdmUserVerifierSkeletonPrivate *priv;
};

struct _GdmUserVerifierSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdm_user_verifier_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmUserVerifierSkeleton, g_object_unref)
#endif

GdmUserVerifier *gdm_user_verifier_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DisplayManager.UserVerifier.ChoiceList */

#define GDM_TYPE_USER_VERIFIER_CHOICE_LIST (gdm_user_verifier_choice_list_get_type ())
#define GDM_USER_VERIFIER_CHOICE_LIST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST, GdmUserVerifierChoiceList))
#define GDM_IS_USER_VERIFIER_CHOICE_LIST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST))
#define GDM_USER_VERIFIER_CHOICE_LIST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST, GdmUserVerifierChoiceListIface))

struct _GdmUserVerifierChoiceList;
typedef struct _GdmUserVerifierChoiceList GdmUserVerifierChoiceList;
typedef struct _GdmUserVerifierChoiceListIface GdmUserVerifierChoiceListIface;

struct _GdmUserVerifierChoiceListIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_select_choice) (
    GdmUserVerifierChoiceList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    const gchar *arg_choice);

  void (*choice_query) (
    GdmUserVerifierChoiceList *object,
    const gchar *arg_service_name,
    const gchar *arg_prompt_message,
    GVariant *arg_list);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmUserVerifierChoiceList, g_object_unref)
#endif

GType gdm_user_verifier_choice_list_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdm_user_verifier_choice_list_interface_info (void);
guint gdm_user_verifier_choice_list_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdm_user_verifier_choice_list_complete_select_choice (
    GdmUserVerifierChoiceList *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gdm_user_verifier_choice_list_emit_choice_query (
    GdmUserVerifierChoiceList *object,
    const gchar *arg_service_name,
    const gchar *arg_prompt_message,
    GVariant *arg_list);



/* D-Bus method calls: */
void gdm_user_verifier_choice_list_call_select_choice (
    GdmUserVerifierChoiceList *proxy,
    const gchar *arg_service_name,
    const gchar *arg_choice,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_user_verifier_choice_list_call_select_choice_finish (
    GdmUserVerifierChoiceList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_user_verifier_choice_list_call_select_choice_sync (
    GdmUserVerifierChoiceList *proxy,
    const gchar *arg_service_name,
    const gchar *arg_choice,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDM_TYPE_USER_VERIFIER_CHOICE_LIST_PROXY (gdm_user_verifier_choice_list_proxy_get_type ())
#define GDM_USER_VERIFIER_CHOICE_LIST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_PROXY, GdmUserVerifierChoiceListProxy))
#define GDM_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_PROXY, GdmUserVerifierChoiceListProxyClass))
#define GDM_USER_VERIFIER_CHOICE_LIST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_PROXY, GdmUserVerifierChoiceListProxyClass))
#define GDM_IS_USER_VERIFIER_CHOICE_LIST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_PROXY))
#define GDM_IS_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_PROXY))

typedef struct _GdmUserVerifierChoiceListProxy GdmUserVerifierChoiceListProxy;
typedef struct _GdmUserVerifierChoiceListProxyClass GdmUserVerifierChoiceListProxyClass;
typedef struct _GdmUserVerifierChoiceListProxyPrivate GdmUserVerifierChoiceListProxyPrivate;

struct _GdmUserVerifierChoiceListProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdmUserVerifierChoiceListProxyPrivate *priv;
};

struct _GdmUserVerifierChoiceListProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdm_user_verifier_choice_list_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmUserVerifierChoiceListProxy, g_object_unref)
#endif

void gdm_user_verifier_choice_list_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmUserVerifierChoiceList *gdm_user_verifier_choice_list_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdmUserVerifierChoiceList *gdm_user_verifier_choice_list_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdm_user_verifier_choice_list_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmUserVerifierChoiceList *gdm_user_verifier_choice_list_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdmUserVerifierChoiceList *gdm_user_verifier_choice_list_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDM_TYPE_USER_VERIFIER_CHOICE_LIST_SKELETON (gdm_user_verifier_choice_list_skeleton_get_type ())
#define GDM_USER_VERIFIER_CHOICE_LIST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_SKELETON, GdmUserVerifierChoiceListSkeleton))
#define GDM_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_SKELETON, GdmUserVerifierChoiceListSkeletonClass))
#define GDM_USER_VERIFIER_CHOICE_LIST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_SKELETON, GdmUserVerifierChoiceListSkeletonClass))
#define GDM_IS_USER_VERIFIER_CHOICE_LIST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_SKELETON))
#define GDM_IS_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_USER_VERIFIER_CHOICE_LIST_SKELETON))

typedef struct _GdmUserVerifierChoiceListSkeleton GdmUserVerifierChoiceListSkeleton;
typedef struct _GdmUserVerifierChoiceListSkeletonClass GdmUserVerifierChoiceListSkeletonClass;
typedef struct _GdmUserVerifierChoiceListSkeletonPrivate GdmUserVerifierChoiceListSkeletonPrivate;

struct _GdmUserVerifierChoiceListSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdmUserVerifierChoiceListSkeletonPrivate *priv;
};

struct _GdmUserVerifierChoiceListSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdm_user_verifier_choice_list_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmUserVerifierChoiceListSkeleton, g_object_unref)
#endif

GdmUserVerifierChoiceList *gdm_user_verifier_choice_list_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DisplayManager.Greeter */

#define GDM_TYPE_GREETER (gdm_greeter_get_type ())
#define GDM_GREETER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_GREETER, GdmGreeter))
#define GDM_IS_GREETER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_GREETER))
#define GDM_GREETER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDM_TYPE_GREETER, GdmGreeterIface))

struct _GdmGreeter;
typedef struct _GdmGreeter GdmGreeter;
typedef struct _GdmGreeterIface GdmGreeterIface;

struct _GdmGreeterIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_begin_auto_login) (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username);

  gboolean (*handle_get_timed_login_details) (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_select_session) (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session);

  gboolean (*handle_select_user) (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username);

  gboolean (*handle_start_session_when_ready) (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service_name,
    gboolean arg_should_start_session);

  void (*default_language_name_changed) (
    GdmGreeter *object,
    const gchar *arg_language_name);

  void (*default_session_name_changed) (
    GdmGreeter *object,
    const gchar *arg_session_name);

  void (*reauthenticated) (
    GdmGreeter *object,
    const gchar *arg_service_name);

  void (*selected_user_changed) (
    GdmGreeter *object,
    const gchar *arg_username);

  void (*session_opened) (
    GdmGreeter *object,
    const gchar *arg_service_name);

  void (*timed_login_requested) (
    GdmGreeter *object,
    const gchar *arg_username,
    gint arg_delay);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmGreeter, g_object_unref)
#endif

GType gdm_greeter_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdm_greeter_interface_info (void);
guint gdm_greeter_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdm_greeter_complete_select_session (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation);

void gdm_greeter_complete_select_user (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation);

void gdm_greeter_complete_begin_auto_login (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation);

void gdm_greeter_complete_get_timed_login_details (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation,
    gboolean enabled,
    const gchar *username,
    gint delay);

void gdm_greeter_complete_start_session_when_ready (
    GdmGreeter *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gdm_greeter_emit_selected_user_changed (
    GdmGreeter *object,
    const gchar *arg_username);

void gdm_greeter_emit_default_language_name_changed (
    GdmGreeter *object,
    const gchar *arg_language_name);

void gdm_greeter_emit_default_session_name_changed (
    GdmGreeter *object,
    const gchar *arg_session_name);

void gdm_greeter_emit_timed_login_requested (
    GdmGreeter *object,
    const gchar *arg_username,
    gint arg_delay);

void gdm_greeter_emit_session_opened (
    GdmGreeter *object,
    const gchar *arg_service_name);

void gdm_greeter_emit_reauthenticated (
    GdmGreeter *object,
    const gchar *arg_service_name);



/* D-Bus method calls: */
void gdm_greeter_call_select_session (
    GdmGreeter *proxy,
    const gchar *arg_session,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_greeter_call_select_session_finish (
    GdmGreeter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_greeter_call_select_session_sync (
    GdmGreeter *proxy,
    const gchar *arg_session,
    GCancellable *cancellable,
    GError **error);

void gdm_greeter_call_select_user (
    GdmGreeter *proxy,
    const gchar *arg_username,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_greeter_call_select_user_finish (
    GdmGreeter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_greeter_call_select_user_sync (
    GdmGreeter *proxy,
    const gchar *arg_username,
    GCancellable *cancellable,
    GError **error);

void gdm_greeter_call_begin_auto_login (
    GdmGreeter *proxy,
    const gchar *arg_username,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_greeter_call_begin_auto_login_finish (
    GdmGreeter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_greeter_call_begin_auto_login_sync (
    GdmGreeter *proxy,
    const gchar *arg_username,
    GCancellable *cancellable,
    GError **error);

void gdm_greeter_call_get_timed_login_details (
    GdmGreeter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_greeter_call_get_timed_login_details_finish (
    GdmGreeter *proxy,
    gboolean *out_enabled,
    gchar **out_username,
    gint *out_delay,
    GAsyncResult *res,
    GError **error);

gboolean gdm_greeter_call_get_timed_login_details_sync (
    GdmGreeter *proxy,
    gboolean *out_enabled,
    gchar **out_username,
    gint *out_delay,
    GCancellable *cancellable,
    GError **error);

void gdm_greeter_call_start_session_when_ready (
    GdmGreeter *proxy,
    const gchar *arg_service_name,
    gboolean arg_should_start_session,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_greeter_call_start_session_when_ready_finish (
    GdmGreeter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_greeter_call_start_session_when_ready_sync (
    GdmGreeter *proxy,
    const gchar *arg_service_name,
    gboolean arg_should_start_session,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDM_TYPE_GREETER_PROXY (gdm_greeter_proxy_get_type ())
#define GDM_GREETER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_GREETER_PROXY, GdmGreeterProxy))
#define GDM_GREETER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_GREETER_PROXY, GdmGreeterProxyClass))
#define GDM_GREETER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_GREETER_PROXY, GdmGreeterProxyClass))
#define GDM_IS_GREETER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_GREETER_PROXY))
#define GDM_IS_GREETER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_GREETER_PROXY))

typedef struct _GdmGreeterProxy GdmGreeterProxy;
typedef struct _GdmGreeterProxyClass GdmGreeterProxyClass;
typedef struct _GdmGreeterProxyPrivate GdmGreeterProxyPrivate;

struct _GdmGreeterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdmGreeterProxyPrivate *priv;
};

struct _GdmGreeterProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdm_greeter_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmGreeterProxy, g_object_unref)
#endif

void gdm_greeter_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmGreeter *gdm_greeter_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdmGreeter *gdm_greeter_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdm_greeter_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmGreeter *gdm_greeter_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdmGreeter *gdm_greeter_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDM_TYPE_GREETER_SKELETON (gdm_greeter_skeleton_get_type ())
#define GDM_GREETER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_GREETER_SKELETON, GdmGreeterSkeleton))
#define GDM_GREETER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_GREETER_SKELETON, GdmGreeterSkeletonClass))
#define GDM_GREETER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_GREETER_SKELETON, GdmGreeterSkeletonClass))
#define GDM_IS_GREETER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_GREETER_SKELETON))
#define GDM_IS_GREETER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_GREETER_SKELETON))

typedef struct _GdmGreeterSkeleton GdmGreeterSkeleton;
typedef struct _GdmGreeterSkeletonClass GdmGreeterSkeletonClass;
typedef struct _GdmGreeterSkeletonPrivate GdmGreeterSkeletonPrivate;

struct _GdmGreeterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdmGreeterSkeletonPrivate *priv;
};

struct _GdmGreeterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdm_greeter_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmGreeterSkeleton, g_object_unref)
#endif

GdmGreeter *gdm_greeter_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DisplayManager.RemoteGreeter */

#define GDM_TYPE_REMOTE_GREETER (gdm_remote_greeter_get_type ())
#define GDM_REMOTE_GREETER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_REMOTE_GREETER, GdmRemoteGreeter))
#define GDM_IS_REMOTE_GREETER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_REMOTE_GREETER))
#define GDM_REMOTE_GREETER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDM_TYPE_REMOTE_GREETER, GdmRemoteGreeterIface))

struct _GdmRemoteGreeter;
typedef struct _GdmRemoteGreeter GdmRemoteGreeter;
typedef struct _GdmRemoteGreeterIface GdmRemoteGreeterIface;

struct _GdmRemoteGreeterIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_disconnect) (
    GdmRemoteGreeter *object,
    GDBusMethodInvocation *invocation);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmRemoteGreeter, g_object_unref)
#endif

GType gdm_remote_greeter_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdm_remote_greeter_interface_info (void);
guint gdm_remote_greeter_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdm_remote_greeter_complete_disconnect (
    GdmRemoteGreeter *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gdm_remote_greeter_call_disconnect (
    GdmRemoteGreeter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_remote_greeter_call_disconnect_finish (
    GdmRemoteGreeter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_remote_greeter_call_disconnect_sync (
    GdmRemoteGreeter *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDM_TYPE_REMOTE_GREETER_PROXY (gdm_remote_greeter_proxy_get_type ())
#define GDM_REMOTE_GREETER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_REMOTE_GREETER_PROXY, GdmRemoteGreeterProxy))
#define GDM_REMOTE_GREETER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_REMOTE_GREETER_PROXY, GdmRemoteGreeterProxyClass))
#define GDM_REMOTE_GREETER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_REMOTE_GREETER_PROXY, GdmRemoteGreeterProxyClass))
#define GDM_IS_REMOTE_GREETER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_REMOTE_GREETER_PROXY))
#define GDM_IS_REMOTE_GREETER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_REMOTE_GREETER_PROXY))

typedef struct _GdmRemoteGreeterProxy GdmRemoteGreeterProxy;
typedef struct _GdmRemoteGreeterProxyClass GdmRemoteGreeterProxyClass;
typedef struct _GdmRemoteGreeterProxyPrivate GdmRemoteGreeterProxyPrivate;

struct _GdmRemoteGreeterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdmRemoteGreeterProxyPrivate *priv;
};

struct _GdmRemoteGreeterProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdm_remote_greeter_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmRemoteGreeterProxy, g_object_unref)
#endif

void gdm_remote_greeter_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmRemoteGreeter *gdm_remote_greeter_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdmRemoteGreeter *gdm_remote_greeter_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdm_remote_greeter_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmRemoteGreeter *gdm_remote_greeter_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdmRemoteGreeter *gdm_remote_greeter_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDM_TYPE_REMOTE_GREETER_SKELETON (gdm_remote_greeter_skeleton_get_type ())
#define GDM_REMOTE_GREETER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_REMOTE_GREETER_SKELETON, GdmRemoteGreeterSkeleton))
#define GDM_REMOTE_GREETER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_REMOTE_GREETER_SKELETON, GdmRemoteGreeterSkeletonClass))
#define GDM_REMOTE_GREETER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_REMOTE_GREETER_SKELETON, GdmRemoteGreeterSkeletonClass))
#define GDM_IS_REMOTE_GREETER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_REMOTE_GREETER_SKELETON))
#define GDM_IS_REMOTE_GREETER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_REMOTE_GREETER_SKELETON))

typedef struct _GdmRemoteGreeterSkeleton GdmRemoteGreeterSkeleton;
typedef struct _GdmRemoteGreeterSkeletonClass GdmRemoteGreeterSkeletonClass;
typedef struct _GdmRemoteGreeterSkeletonPrivate GdmRemoteGreeterSkeletonPrivate;

struct _GdmRemoteGreeterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdmRemoteGreeterSkeletonPrivate *priv;
};

struct _GdmRemoteGreeterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdm_remote_greeter_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmRemoteGreeterSkeleton, g_object_unref)
#endif

GdmRemoteGreeter *gdm_remote_greeter_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DisplayManager.Chooser */

#define GDM_TYPE_CHOOSER (gdm_chooser_get_type ())
#define GDM_CHOOSER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_CHOOSER, GdmChooser))
#define GDM_IS_CHOOSER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_CHOOSER))
#define GDM_CHOOSER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDM_TYPE_CHOOSER, GdmChooserIface))

struct _GdmChooser;
typedef struct _GdmChooser GdmChooser;
typedef struct _GdmChooserIface GdmChooserIface;

struct _GdmChooserIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_disconnect) (
    GdmChooser *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_select_hostname) (
    GdmChooser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_hostname);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmChooser, g_object_unref)
#endif

GType gdm_chooser_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdm_chooser_interface_info (void);
guint gdm_chooser_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdm_chooser_complete_select_hostname (
    GdmChooser *object,
    GDBusMethodInvocation *invocation);

void gdm_chooser_complete_disconnect (
    GdmChooser *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gdm_chooser_call_select_hostname (
    GdmChooser *proxy,
    const gchar *arg_hostname,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_chooser_call_select_hostname_finish (
    GdmChooser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_chooser_call_select_hostname_sync (
    GdmChooser *proxy,
    const gchar *arg_hostname,
    GCancellable *cancellable,
    GError **error);

void gdm_chooser_call_disconnect (
    GdmChooser *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_chooser_call_disconnect_finish (
    GdmChooser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_chooser_call_disconnect_sync (
    GdmChooser *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDM_TYPE_CHOOSER_PROXY (gdm_chooser_proxy_get_type ())
#define GDM_CHOOSER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_CHOOSER_PROXY, GdmChooserProxy))
#define GDM_CHOOSER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_CHOOSER_PROXY, GdmChooserProxyClass))
#define GDM_CHOOSER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_CHOOSER_PROXY, GdmChooserProxyClass))
#define GDM_IS_CHOOSER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_CHOOSER_PROXY))
#define GDM_IS_CHOOSER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_CHOOSER_PROXY))

typedef struct _GdmChooserProxy GdmChooserProxy;
typedef struct _GdmChooserProxyClass GdmChooserProxyClass;
typedef struct _GdmChooserProxyPrivate GdmChooserProxyPrivate;

struct _GdmChooserProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdmChooserProxyPrivate *priv;
};

struct _GdmChooserProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdm_chooser_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmChooserProxy, g_object_unref)
#endif

void gdm_chooser_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmChooser *gdm_chooser_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdmChooser *gdm_chooser_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdm_chooser_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmChooser *gdm_chooser_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdmChooser *gdm_chooser_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDM_TYPE_CHOOSER_SKELETON (gdm_chooser_skeleton_get_type ())
#define GDM_CHOOSER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_TYPE_CHOOSER_SKELETON, GdmChooserSkeleton))
#define GDM_CHOOSER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_TYPE_CHOOSER_SKELETON, GdmChooserSkeletonClass))
#define GDM_CHOOSER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_TYPE_CHOOSER_SKELETON, GdmChooserSkeletonClass))
#define GDM_IS_CHOOSER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_TYPE_CHOOSER_SKELETON))
#define GDM_IS_CHOOSER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_TYPE_CHOOSER_SKELETON))

typedef struct _GdmChooserSkeleton GdmChooserSkeleton;
typedef struct _GdmChooserSkeletonClass GdmChooserSkeletonClass;
typedef struct _GdmChooserSkeletonPrivate GdmChooserSkeletonPrivate;

struct _GdmChooserSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdmChooserSkeletonPrivate *priv;
};

struct _GdmChooserSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdm_chooser_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmChooserSkeleton, g_object_unref)
#endif

GdmChooser *gdm_chooser_skeleton_new (void);


G_END_DECLS

#endif /* __GDM_CLIENT_GLUE_H__ */
