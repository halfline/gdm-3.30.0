/*
 * Generated by gdbus-codegen 2.56.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GDM_MANAGER_GLUE_H__
#define __GDM_MANAGER_GLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DisplayManager.Manager */

#define GDM_DBUS_TYPE_MANAGER (gdm_dbus_manager_get_type ())
#define GDM_DBUS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_DBUS_TYPE_MANAGER, GdmDBusManager))
#define GDM_DBUS_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_DBUS_TYPE_MANAGER))
#define GDM_DBUS_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDM_DBUS_TYPE_MANAGER, GdmDBusManagerIface))

struct _GdmDBusManager;
typedef struct _GdmDBusManager GdmDBusManager;
typedef struct _GdmDBusManagerIface GdmDBusManagerIface;

struct _GdmDBusManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_open_reauthentication_channel) (
    GdmDBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username);

  gboolean (*handle_open_session) (
    GdmDBusManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_display) (
    GdmDBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_details);

  const gchar * (*get_version) (GdmDBusManager *object);

};

GType gdm_dbus_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdm_dbus_manager_interface_info (void);
guint gdm_dbus_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdm_dbus_manager_complete_register_display (
    GdmDBusManager *object,
    GDBusMethodInvocation *invocation);

void gdm_dbus_manager_complete_open_session (
    GdmDBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *address);

void gdm_dbus_manager_complete_open_reauthentication_channel (
    GdmDBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *address);



/* D-Bus method calls: */
void gdm_dbus_manager_call_register_display (
    GdmDBusManager *proxy,
    GVariant *arg_details,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_dbus_manager_call_register_display_finish (
    GdmDBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdm_dbus_manager_call_register_display_sync (
    GdmDBusManager *proxy,
    GVariant *arg_details,
    GCancellable *cancellable,
    GError **error);

void gdm_dbus_manager_call_open_session (
    GdmDBusManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_dbus_manager_call_open_session_finish (
    GdmDBusManager *proxy,
    gchar **out_address,
    GAsyncResult *res,
    GError **error);

gboolean gdm_dbus_manager_call_open_session_sync (
    GdmDBusManager *proxy,
    gchar **out_address,
    GCancellable *cancellable,
    GError **error);

void gdm_dbus_manager_call_open_reauthentication_channel (
    GdmDBusManager *proxy,
    const gchar *arg_username,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdm_dbus_manager_call_open_reauthentication_channel_finish (
    GdmDBusManager *proxy,
    gchar **out_address,
    GAsyncResult *res,
    GError **error);

gboolean gdm_dbus_manager_call_open_reauthentication_channel_sync (
    GdmDBusManager *proxy,
    const gchar *arg_username,
    gchar **out_address,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *gdm_dbus_manager_get_version (GdmDBusManager *object);
gchar *gdm_dbus_manager_dup_version (GdmDBusManager *object);
void gdm_dbus_manager_set_version (GdmDBusManager *object, const gchar *value);


/* ---- */

#define GDM_DBUS_TYPE_MANAGER_PROXY (gdm_dbus_manager_proxy_get_type ())
#define GDM_DBUS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_DBUS_TYPE_MANAGER_PROXY, GdmDBusManagerProxy))
#define GDM_DBUS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_DBUS_TYPE_MANAGER_PROXY, GdmDBusManagerProxyClass))
#define GDM_DBUS_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_DBUS_TYPE_MANAGER_PROXY, GdmDBusManagerProxyClass))
#define GDM_DBUS_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_DBUS_TYPE_MANAGER_PROXY))
#define GDM_DBUS_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_DBUS_TYPE_MANAGER_PROXY))

typedef struct _GdmDBusManagerProxy GdmDBusManagerProxy;
typedef struct _GdmDBusManagerProxyClass GdmDBusManagerProxyClass;
typedef struct _GdmDBusManagerProxyPrivate GdmDBusManagerProxyPrivate;

struct _GdmDBusManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdmDBusManagerProxyPrivate *priv;
};

struct _GdmDBusManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdm_dbus_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmDBusManagerProxy, g_object_unref)
#endif

void gdm_dbus_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmDBusManager *gdm_dbus_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdmDBusManager *gdm_dbus_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdm_dbus_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdmDBusManager *gdm_dbus_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdmDBusManager *gdm_dbus_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDM_DBUS_TYPE_MANAGER_SKELETON (gdm_dbus_manager_skeleton_get_type ())
#define GDM_DBUS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDM_DBUS_TYPE_MANAGER_SKELETON, GdmDBusManagerSkeleton))
#define GDM_DBUS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDM_DBUS_TYPE_MANAGER_SKELETON, GdmDBusManagerSkeletonClass))
#define GDM_DBUS_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDM_DBUS_TYPE_MANAGER_SKELETON, GdmDBusManagerSkeletonClass))
#define GDM_DBUS_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDM_DBUS_TYPE_MANAGER_SKELETON))
#define GDM_DBUS_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDM_DBUS_TYPE_MANAGER_SKELETON))

typedef struct _GdmDBusManagerSkeleton GdmDBusManagerSkeleton;
typedef struct _GdmDBusManagerSkeletonClass GdmDBusManagerSkeletonClass;
typedef struct _GdmDBusManagerSkeletonPrivate GdmDBusManagerSkeletonPrivate;

struct _GdmDBusManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdmDBusManagerSkeletonPrivate *priv;
};

struct _GdmDBusManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdm_dbus_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdmDBusManagerSkeleton, g_object_unref)
#endif

GdmDBusManager *gdm_dbus_manager_skeleton_new (void);


G_END_DECLS

#endif /* __GDM_MANAGER_GLUE_H__ */
